"""
QR Authentication module for 45telega MCP Server
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è QR –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É MCP —Å Rate Limiter –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
"""
import asyncio
import os
import sys
from pathlib import Path
from typing import Optional

import qrcode
from getpass import getpass
from telethon import TelegramClient
from telethon.errors import SessionPasswordNeededError, TimeoutError


class QRAuthHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ QR –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤ MCP –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É"""
    
    def __init__(self, client: TelegramClient, rate_limiter=None):
        self.client = client
        self.rate_limiter = rate_limiter
        self.max_attempts = 3
        self.qr_timeout = 60  # –¢–∞–π–º–∞—É—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ QR –∫–æ–¥–∞
        self.temp_files = []  # –°–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
    
    async def authenticate(self, method: str = "terminal") -> bool:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ QR –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        
        Args:
            method: "terminal" –¥–ª—è ASCII QR, "file" –¥–ª—è PNG, "both" –¥–ª—è –æ–±–æ–∏—Ö
            
        Returns:
            True –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        print("üîê –ó–∞–ø—É—Å–∫ QR –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        
        try:
            await self.client.connect()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –ª–∏ –º—ã —É–∂–µ
            if await self.client.is_user_authorized():
                me = await self.client.get_me()
                print(f"‚úÖ –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ {me.first_name}")
                if me.username:
                    print(f"üîó Username: @{me.username}")
                return True
            
            # –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º QR login
            print("üì± –°–æ–∑–¥–∞–Ω–∏–µ QR –∫–æ–¥–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
            qr_login = await self.client.qr_login()
            
            attempt = 1
            
            while attempt <= self.max_attempts:
                print(f"\nüîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{self.max_attempts}")
                print(f"‚è∞ QR –∫–æ–¥ –∏—Å—Ç–µ–∫–∞–µ—Ç: {qr_login.expires}")
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º QR –∫–æ–¥
                await self._display_qr(qr_login.url, method)
                
                print("\nüëÜ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥ –≤ Telegram –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
                
                try:
                    # –û–∂–∏–¥–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                    result = await qr_login.wait(timeout=self.qr_timeout)
                    
                    if result:
                        # –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
                        me = await self.client.get_me()
                        print(f"\nüéâ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!")
                        print(f"üë§ –ò–º—è: {me.first_name} {me.last_name or ''}")
                        if me.username:
                            print(f"üîó Username: @{me.username}")
                        print(f"üÜî ID: {me.id}")
                        
                        # Cleanup –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                        await self._cleanup_temp_files()
                        return True
                
                except TimeoutError:
                    print("‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ")
                    
                    if attempt < self.max_attempts:
                        print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ QR –∫–æ–¥–∞...")
                        await qr_login.recreate()
                        attempt += 1
                    else:
                        print("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫")
                        break
                
                except SessionPasswordNeededError:
                    print("üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å 2FA...")
                    success = await self._handle_2fa()
                    if success:
                        await self._cleanup_temp_files()
                    return success
            
            print("\n‚ùå QR –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
            print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ phone –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é:")
            print("uv run 45telega sign-in --api-id X --api-hash Y --phone-number +7XXX")
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ QR –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
        
        finally:
            await self._cleanup_temp_files()
    
    async def _display_qr(self, qr_url: str, method: str) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ QR –∫–æ–¥–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        
        qr = qrcode.QRCode(
            version=1,
            error_correction=qrcode.constants.ERROR_CORRECT_L,
            box_size=10,
            border=4,
        )
        qr.add_data(qr_url)
        qr.make(fit=True)
        
        if method in ["terminal", "both"]:
            print("\n" + "="*50)
            print("üì± QR –ö–û–î –î–õ–Ø –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø:")
            print("="*50)
            qr.print_ascii(invert=True)
            print("="*50)
        
        if method in ["file", "both"]:
            # –°–æ–∑–¥–∞–µ–º PNG —Ñ–∞–π–ª
            img = qr.make_image(fill_color="black", back_color="white")
            qr_file = Path("telegram_qr_auth.png")
            img.save(qr_file)
            self.temp_files.append(qr_file)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
            print(f"üíæ QR –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {qr_file.absolute()}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            try:
                if sys.platform == "darwin":  # macOS
                    os.system(f"open {qr_file}")
                elif sys.platform == "linux":
                    os.system(f"xdg-open {qr_file}")
                elif sys.platform == "win32":
                    os.system(f"start {qr_file}")
            except Exception:
                pass
    
    async def _handle_2fa(self) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        print("üîê –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–µ–Ω –ø–∞—Ä–æ–ª—å 2FA")
        
        max_attempts = 3
        for attempt in range(max_attempts):
            try:
                password = getpass(f"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts}): ")
                
                if not password:
                    print("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                    continue
                
                await self.client.sign_in(password=password)
                
                me = await self.client.get_me()
                print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å 2FA –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                print(f"üë§ {me.first_name}")
                if me.username:
                    print(f"üîó Username: @{me.username}")
                return True
                
            except Exception as e:
                print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å: {e}")
                if attempt == max_attempts - 1:
                    print("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è")
        
        return False
    
    async def _cleanup_temp_files(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        for file_path in self.temp_files:
            try:
                if file_path.exists():
                    file_path.unlink()
            except Exception:
                pass
        self.temp_files.clear()